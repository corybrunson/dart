% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtration.R
\name{filtration}
\alias{filtration}
\title{Filtered simplicial complex}
\usage{
filtration(simplices, grades = NULL, type = "infer", persistent = TRUE)
}
\arguments{
\item{simplices}{list of simplices in filtration order, or a simplex tree.}

\item{grades}{numeric vector of grades or 'weights' of vertices, edges, or simplices. If \code{simplices}
is a list, \code{grades} is expected to be in filtration order, otherwise in shortlex order if \code{simplices} 
is a simplex tree.}
}
\value{
a \code{Filtration} \link[R6]{R6} object.
}
\description{
Creates a filtered simplicial complex.
}
\details{
This function creates a (simplicial) filtration, i.e. a simplicial complex filtered 
according to some choice of grading function which induces a partial order on the simplices of the complex. 
Given \code{simplices} and a (possibly much smaller) vector of \code{grades} or 'weights', this function 
efficiently builds and implicitly stores the simplices and their grades in the filtration order. If
\code{grades} are not totally ordered, then a total order is imposed using the lexicographical ordering
of on the facet poset of \code{simplices}. \cr
\cr 
The filtration object itself acts as a light encoding on the input filtration; the simplices of the filtration 
are stored implicitly using their rank in the combinatorial number system (see \link{rank_combn}), and the only 
the minimal grades are stored. That is, the grades for the k-simplices are computed on demand from the set of 
minimal grades and the k-simplices for k > 0 are generated on the fly only when needed. Although the memory complexity 
of storing all of the ranks of \code{simplices} matches the size \code{simplices} itself, in practice the
the combinatorial number system provides a very cache-efficient means of storage. 
\cr
To create a filtration, minimally the \code{simplices} must be provided, and optionally the \code{grades} if those 
need be stored as well. If \code{simplices} is a list of simplices, both \code{simplices} and \code{grades} are assumed 
to be in filtration order; alternatively, if \code{simplices} is a simplex tree, \code{grades} are assumed to be 
shortlex order (see \link[simplextree]{level_order}). If the length of \code{grades} matches the number of vertices
in the filtration, a lower star filtration is built and only the vertex grades are stored; if the length of \code{grades} 
matches the number of edges, a flag filtration is built and only the edge grades are stored; for all other filtrations, 
the length of \code{grades} must match the number of simplices given, in which case the full vector is stored. \cr
\cr
In all cases, the k-simplices are first converted to their lexicographical ranks in (fast) \eqn{O(mk)} time, and then 
the corresponding filtration with \code{m} simplices is created in \eqn{O(m \log m)} time. The returned filtration provides 
efficient access to simplices and grades in the filtration order. Specifically, k-simplices can be accessed at any index 
\code{i} in at most O(k) time, depending on type of filtration built (O(1) access for generic filtrations). The grade 
associated with a k-simplex is computed in at most \eqn{O(k log m[k])} time, again depending on the type of filtration
built. The grading for all k-simplices is computed separately in at most \eqn{O(k m[k])} time. \cr
\cr
}
