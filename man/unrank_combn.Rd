% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combinatorial.R
\name{unrank_combn}
\alias{unrank_combn}
\title{Unrank combinations}
\usage{
unrank_combn(x, n, k)
}
\arguments{
\item{x}{vector of ranks.}

\item{n}{choice of number system to rank against. Must be at least as large as the largest value in \code{x}.}

\item{k}{}
}
\description{
Ranks combinations lexicographically
}
\details{
This function provides the inverse of the ranking function which maps k-combinations to their lexicographical 
position in the (\code{n} choose \code{k}) combinatorial number system. For example, if \code{x}
equals \code{combn(5,2)}, then \code{all(unrank_combn(seq_len(choose(5,2))) == x)} is \code{TRUE}.
The choice of \code{n} affects the ranking, but the ranking will always rank combinations in 
lexicographical order. \cr
\cr
In general, unranking can be slower than ranking. The current implementation uses an implicit O(k*log(n))
via a binary search to perform the unranking, except in the case where k = 2, which is particularly efficient 
as a closed-form solution is known.
}
