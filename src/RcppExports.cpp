// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// reduce_pspbool
int reduce_pspbool(SEXP D_ptr, SEXP V_ptr);
RcppExport SEXP _dart_reduce_pspbool(SEXP D_ptrSEXP, SEXP V_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type D_ptr(D_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type V_ptr(V_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_pspbool(D_ptr, V_ptr));
    return rcpp_result_gen;
END_RCPP
}
// reduce_local_pspbool
int reduce_local_pspbool(SEXP D1_ptr, SEXP V1_ptr, SEXP D2_ptr, SEXP V2_ptr, bool clearing);
RcppExport SEXP _dart_reduce_local_pspbool(SEXP D1_ptrSEXP, SEXP V1_ptrSEXP, SEXP D2_ptrSEXP, SEXP V2_ptrSEXP, SEXP clearingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type D1_ptr(D1_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type V1_ptr(V1_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D2_ptr(D2_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type V2_ptr(V2_ptrSEXP);
    Rcpp::traits::input_parameter< bool >::type clearing(clearingSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_local_pspbool(D1_ptr, V1_ptr, D2_ptr, V2_ptr, clearing));
    return rcpp_result_gen;
END_RCPP
}
// simulate_vineyard_pspbool
int simulate_vineyard_pspbool(SEXP R_ptr, SEXP V_ptr, IntegerVector schedule, Nullable< Function > f);
RcppExport SEXP _dart_simulate_vineyard_pspbool(SEXP R_ptrSEXP, SEXP V_ptrSEXP, SEXP scheduleSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_ptr(R_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type V_ptr(V_ptrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type schedule(scheduleSEXP);
    Rcpp::traits::input_parameter< Nullable< Function > >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_vineyard_pspbool(R_ptr, V_ptr, schedule, f));
    return rcpp_result_gen;
END_RCPP
}
// move_schedule_local
void move_schedule_local(SEXP r1, SEXP v1, SEXP r2, SEXP v2, IntegerVector schedule, Nullable< Function > f);
RcppExport SEXP _dart_move_schedule_local(SEXP r1SEXP, SEXP v1SEXP, SEXP r2SEXP, SEXP v2SEXP, SEXP scheduleSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type schedule(scheduleSEXP);
    Rcpp::traits::input_parameter< Nullable< Function > >::type f(fSEXP);
    move_schedule_local(r1, v1, r2, v2, schedule, f);
    return R_NilValue;
END_RCPP
}
// reduce_arma
Rcpp::List reduce_arma(arma::sp_mat& D, arma::sp_mat& v);
RcppExport SEXP _dart_reduce_arma(SEXP DSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_arma(D, v));
    return rcpp_result_gen;
END_RCPP
}
// reduce_local_arma
Rcpp::List reduce_local_arma(arma::sp_mat& D1, arma::sp_mat& v1, arma::sp_mat& D2, arma::sp_mat& v2, bool clearing);
RcppExport SEXP _dart_reduce_local_arma(SEXP D1SEXP, SEXP v1SEXP, SEXP D2SEXP, SEXP v2SEXP, SEXP clearingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type D2(D2SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< bool >::type clearing(clearingSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_local_arma(D1, v1, D2, v2, clearing));
    return rcpp_result_gen;
END_RCPP
}
// push_map
NumericMatrix push_map(const NumericMatrix& x, const double m, const double b);
RcppExport SEXP _dart_push_map(SEXP xSEXP, SEXP mSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(push_map(x, m, b));
    return rcpp_result_gen;
END_RCPP
}
// boundary_matrix_fi_full
S4 boundary_matrix_fi_full(SEXP filtration);
RcppExport SEXP _dart_boundary_matrix_fi_full(SEXP filtrationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filtration(filtrationSEXP);
    rcpp_result_gen = Rcpp::wrap(boundary_matrix_fi_full(filtration));
    return rcpp_result_gen;
END_RCPP
}
// boundary_matrix_fi
S4 boundary_matrix_fi(SEXP filtration, const size_t k);
RcppExport SEXP _dart_boundary_matrix_fi(SEXP filtrationSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type filtration(filtrationSEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(boundary_matrix_fi(filtration, k));
    return rcpp_result_gen;
END_RCPP
}
// boundary_matrix_st
S4 boundary_matrix_st(SEXP stree, const size_t k);
RcppExport SEXP _dart_boundary_matrix_st(SEXP streeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type stree(streeSEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(boundary_matrix_st(stree, k));
    return rcpp_result_gen;
END_RCPP
}
// all_lcs
ListOf< IntegerVector > all_lcs(IntegerVector a, IntegerVector b);
RcppExport SEXP _dart_all_lcs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(all_lcs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// LIS
List LIS(const IntegerVector& a);
RcppExport SEXP _dart_LIS(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(LIS(a));
    return rcpp_result_gen;
END_RCPP
}
// countNumLIS
int countNumLIS(std::vector<int> x);
RcppExport SEXP _dart_countNumLIS(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countNumLIS(x));
    return rcpp_result_gen;
END_RCPP
}
// inversions
IntegerMatrix inversions(const IntegerVector& a);
RcppExport SEXP _dart_inversions(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(inversions(a));
    return rcpp_result_gen;
END_RCPP
}
// inversion_count
int inversion_count(IntegerVector iv);
RcppExport SEXP _dart_inversion_count(SEXP ivSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type iv(ivSEXP);
    rcpp_result_gen = Rcpp::wrap(inversion_count(iv));
    return rcpp_result_gen;
END_RCPP
}
// perm_dist_mat
NumericVector perm_dist_mat(IntegerMatrix P, const bool kendall, const bool normalize);
RcppExport SEXP _dart_perm_dist_mat(SEXP PSEXP, SEXP kendallSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< const bool >::type kendall(kendallSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_dist_mat(P, kendall, normalize));
    return rcpp_result_gen;
END_RCPP
}
// fast_choose
size_t fast_choose(const size_t n, const size_t k);
RcppExport SEXP _dart_fast_choose(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_choose(n, k));
    return rcpp_result_gen;
END_RCPP
}
// spearman_perm
size_t spearman_perm(const IntegerVector& x, const IntegerVector& y);
RcppExport SEXP _dart_spearman_perm(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_perm(x, y));
    return rcpp_result_gen;
END_RCPP
}
// reduce_local_dense
List reduce_local_dense(const NumericMatrix& D1, const NumericMatrix& v1, const NumericMatrix& D2, const NumericMatrix& v2);
RcppExport SEXP _dart_reduce_local_dense(SEXP D1SEXP, SEXP v1SEXP, SEXP D2SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D2(D2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_local_dense(D1, v1, D2, v2));
    return rcpp_result_gen;
END_RCPP
}
// reduce_dense
List reduce_dense(const NumericMatrix& D, const NumericMatrix& v);
RcppExport SEXP _dart_reduce_dense(SEXP DSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_dense(D, v));
    return rcpp_result_gen;
END_RCPP
}
// interval_cost_rcpp
int interval_cost_rcpp(IntegerVector s, IntegerVector O);
RcppExport SEXP _dart_interval_cost_rcpp(SEXP sSEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_cost_rcpp(s, O));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_cost
IntegerVector pairwise_cost(const IntegerMatrix& M);
RcppExport SEXP _dart_pairwise_cost(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_cost(M));
    return rcpp_result_gen;
END_RCPP
}
// inverse_permutation
IntegerVector inverse_permutation(const IntegerVector& p);
RcppExport SEXP _dart_inverse_permutation(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_permutation(p));
    return rcpp_result_gen;
END_RCPP
}
// inverse_permutation2
IntegerVector inverse_permutation2(IntegerVector p);
RcppExport SEXP _dart_inverse_permutation2(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_permutation2(p));
    return rcpp_result_gen;
END_RCPP
}
// test_unrank
IntegerVector test_unrank(const size_t r, const size_t n, const size_t k);
RcppExport SEXP _dart_test_unrank(SEXP rSEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< const size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(test_unrank(r, n, k));
    return rcpp_result_gen;
END_RCPP
}
// order_simplices
IntegerVector order_simplices(List simplices, NumericVector weights);
RcppExport SEXP _dart_order_simplices(SEXP simplicesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type simplices(simplicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(order_simplices(simplices, weights));
    return rcpp_result_gen;
END_RCPP
}
// unique_numeric
NumericVector unique_numeric(std::vector< double > x, const double eps);
RcppExport SEXP _dart_unique_numeric(SEXP xSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< double > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_numeric(x, eps));
    return rcpp_result_gen;
END_RCPP
}
// longest_inc_subseq
Rcpp::IntegerVector longest_inc_subseq(SEXP X);
RcppExport SEXP _dart_longest_inc_subseq(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(longest_inc_subseq(X));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_segment_intersections
arma::mat pairwise_segment_intersections(const arma::mat& S, const arma::mat& L, bool one_based);
RcppExport SEXP _dart_pairwise_segment_intersections(SEXP SSEXP, SEXP LSEXP, SEXP one_basedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type one_based(one_basedSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_segment_intersections(S, L, one_based));
    return rcpp_result_gen;
END_RCPP
}
// all_segment_intersections
arma::mat all_segment_intersections(const arma::mat& S, bool one_based);
RcppExport SEXP _dart_all_segment_intersections(SEXP SSEXP, SEXP one_basedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type one_based(one_basedSEXP);
    rcpp_result_gen = Rcpp::wrap(all_segment_intersections(S, one_based));
    return rcpp_result_gen;
END_RCPP
}
// bin_break
Rcpp::IntegerVector bin_break(Rcpp::NumericVector x, Rcpp::NumericVector bins);
RcppExport SEXP _dart_bin_break(SEXP xSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(bin_break(x, bins));
    return rcpp_result_gen;
END_RCPP
}
// SearchInStrip
arma::umat SearchInStrip(std::vector< double > y_b, std::vector< double > y_e, double b, double e, bool one_based);
RcppExport SEXP _dart_SearchInStrip(SEXP y_bSEXP, SEXP y_eSEXP, SEXP bSEXP, SEXP eSEXP, SEXP one_basedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< double > >::type y_b(y_bSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type y_e(y_eSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    Rcpp::traits::input_parameter< bool >::type one_based(one_basedSEXP);
    rcpp_result_gen = Rcpp::wrap(SearchInStrip(y_b, y_e, b, e, one_based));
    return rcpp_result_gen;
END_RCPP
}
// span_intersections
arma::mat span_intersections(const arma::umat indices, const Rcpp::NumericVector& y_b, const Rcpp::NumericVector& y_e, double b, double e, bool one_based);
RcppExport SEXP _dart_span_intersections(SEXP indicesSEXP, SEXP y_bSEXP, SEXP y_eSEXP, SEXP bSEXP, SEXP eSEXP, SEXP one_basedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_b(y_bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_e(y_eSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    Rcpp::traits::input_parameter< bool >::type one_based(one_basedSEXP);
    rcpp_result_gen = Rcpp::wrap(span_intersections(indices, y_b, y_e, b, e, one_based));
    return rcpp_result_gen;
END_RCPP
}
// relative_transpositions
Rcpp::IntegerMatrix relative_transpositions(const size_t n, const Rcpp::IntegerMatrix& T);
RcppExport SEXP _dart_relative_transpositions(SEXP nSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(relative_transpositions(n, T));
    return rcpp_result_gen;
END_RCPP
}
// bentley_ottmann
arma::mat bentley_ottmann(const arma::mat& S);
RcppExport SEXP _dart_bentley_ottmann(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(bentley_ottmann(S));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_PspBoolMatrix();
RcppExport SEXP _rcpp_module_boot_implicit_filtration_module();

static const R_CallMethodDef CallEntries[] = {
    {"_dart_reduce_pspbool", (DL_FUNC) &_dart_reduce_pspbool, 2},
    {"_dart_reduce_local_pspbool", (DL_FUNC) &_dart_reduce_local_pspbool, 5},
    {"_dart_simulate_vineyard_pspbool", (DL_FUNC) &_dart_simulate_vineyard_pspbool, 4},
    {"_dart_move_schedule_local", (DL_FUNC) &_dart_move_schedule_local, 6},
    {"_dart_reduce_arma", (DL_FUNC) &_dart_reduce_arma, 2},
    {"_dart_reduce_local_arma", (DL_FUNC) &_dart_reduce_local_arma, 5},
    {"_dart_push_map", (DL_FUNC) &_dart_push_map, 3},
    {"_dart_boundary_matrix_fi_full", (DL_FUNC) &_dart_boundary_matrix_fi_full, 1},
    {"_dart_boundary_matrix_fi", (DL_FUNC) &_dart_boundary_matrix_fi, 2},
    {"_dart_boundary_matrix_st", (DL_FUNC) &_dart_boundary_matrix_st, 2},
    {"_dart_all_lcs", (DL_FUNC) &_dart_all_lcs, 2},
    {"_dart_LIS", (DL_FUNC) &_dart_LIS, 1},
    {"_dart_countNumLIS", (DL_FUNC) &_dart_countNumLIS, 1},
    {"_dart_inversions", (DL_FUNC) &_dart_inversions, 1},
    {"_dart_inversion_count", (DL_FUNC) &_dart_inversion_count, 1},
    {"_dart_perm_dist_mat", (DL_FUNC) &_dart_perm_dist_mat, 3},
    {"_dart_fast_choose", (DL_FUNC) &_dart_fast_choose, 2},
    {"_dart_spearman_perm", (DL_FUNC) &_dart_spearman_perm, 2},
    {"_dart_reduce_local_dense", (DL_FUNC) &_dart_reduce_local_dense, 4},
    {"_dart_reduce_dense", (DL_FUNC) &_dart_reduce_dense, 2},
    {"_dart_interval_cost_rcpp", (DL_FUNC) &_dart_interval_cost_rcpp, 2},
    {"_dart_pairwise_cost", (DL_FUNC) &_dart_pairwise_cost, 1},
    {"_dart_inverse_permutation", (DL_FUNC) &_dart_inverse_permutation, 1},
    {"_dart_inverse_permutation2", (DL_FUNC) &_dart_inverse_permutation2, 1},
    {"_dart_test_unrank", (DL_FUNC) &_dart_test_unrank, 3},
    {"_dart_order_simplices", (DL_FUNC) &_dart_order_simplices, 2},
    {"_dart_unique_numeric", (DL_FUNC) &_dart_unique_numeric, 2},
    {"_dart_longest_inc_subseq", (DL_FUNC) &_dart_longest_inc_subseq, 1},
    {"_dart_pairwise_segment_intersections", (DL_FUNC) &_dart_pairwise_segment_intersections, 3},
    {"_dart_all_segment_intersections", (DL_FUNC) &_dart_all_segment_intersections, 2},
    {"_dart_bin_break", (DL_FUNC) &_dart_bin_break, 2},
    {"_dart_SearchInStrip", (DL_FUNC) &_dart_SearchInStrip, 5},
    {"_dart_span_intersections", (DL_FUNC) &_dart_span_intersections, 6},
    {"_dart_relative_transpositions", (DL_FUNC) &_dart_relative_transpositions, 2},
    {"_dart_bentley_ottmann", (DL_FUNC) &_dart_bentley_ottmann, 1},
    {"_rcpp_module_boot_PspBoolMatrix", (DL_FUNC) &_rcpp_module_boot_PspBoolMatrix, 0},
    {"_rcpp_module_boot_implicit_filtration_module", (DL_FUNC) &_rcpp_module_boot_implicit_filtration_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_dart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
